# üõí La Tienda del Boroj√≥ ‚Äî üçÉ MongoDB

## üìñ Descripci√≥n del proyecto y del escenario

Este repositorio contiene un **mini‚Äìecosistema de MongoDB** üóÑÔ∏è dise√±ado para modelar el flujo de datos de una tienda ficticia üè¨ especializada en la comercializaci√≥n de productos derivados del **boroj√≥** ü•≠, una fruta tropical reconocida por sus propiedades energizantes ‚ö° y su valor cultural üåé en varias regiones de Latinoam√©rica.  

El proyecto se centra en cinco colecciones principales üìÇ que conforman la base de datos:  

- **üì¶ Productos:** cat√°logo de art√≠culos como jugos ü•§, galletas üç™, polvos energizantes üí• y otros derivados del boroj√≥.  
- **üßë‚Äçü§ù‚Äçüßë Clientes:** registros de consumidores con datos de contacto üìá, historial de compras üõçÔ∏è y preferencias ‚≠ê.  
- **üí≥ Ventas:** operaciones realizadas, relacionando clientes üë• y productos adquiridos üéÅ.  
- **üöö Proveedores:** compa√±√≠as que abastecen la tienda con productos terminados üì¶ o materia prima üå±.  
- **üìä Inventario:** gesti√≥n de stock üìâ, lotes üîñ y entradas de mercanc√≠a üì•.  

La pr√°ctica busca ejercitar distintos aspectos del manejo de **MongoDB**:  
- ‚úçÔ∏è Operaciones **CRUD b√°sicas**.  
- üîç Uso de **expresiones regulares** para consultas textuales.  
- üß© Manejo de **operadores sobre arrays**.  
- üìà **Aggregation Framework** para consultas anal√≠ticas.  
- üõ†Ô∏è Creaci√≥n de **funciones personalizadas** en `system.js`.  
- ü§ù Implementaci√≥n de **transacciones multi-documento**.  
- üöÄ Dise√±o y evaluaci√≥n de **√≠ndices** para mejorar el rendimiento.  

---

## ‚öôÔ∏è Preparaci√≥n del entorno

1. **Instala MongoDB Community Edition** (incluye `mongod` y `mongosh`) desde la [documentaci√≥n oficial](https://www.mongodb.com/try/download/community).  
2. Instala tambi√©n **MongoDB Database Tools** si planeas trabajar con `mongoimport` y `mongoexport`.  
3. Clona este repositorio y entra en la carpeta ra√≠z:  
   ```bash
   git clone https://github.com/SantiagoRomero7/TiendaBorojoMongo.git.
   cd TiendaBorojoMongo-main
   ```
4. (Opcional) Crea expl√≠citamente la base de datos:  
   ```bash
   mongosh --eval "use tiendaBorojo"
   ```

> üí° *Consejo:* se recomienda trabajar en un entorno con al menos MongoDB **v5.0+** para garantizar compatibilidad total con transacciones y operaciones de agregaci√≥n.

---

## ‚¨ÜÔ∏è Cargar el dataset

Existen dos m√©todos principales para poblar la base de datos.

### **Opci√≥n A ‚Äî con `mongoimport` (recomendada):**
```bash
mongoimport --db tiendaBorojo --collection productos   --file dataset/productos.json   --jsonArray
mongoimport --db tiendaBorojo --collection clientes    --file dataset/clientes.json    --jsonArray
mongoimport --db tiendaBorojo --collection ventas      --file dataset/ventas.json      --jsonArray
mongoimport --db tiendaBorojo --collection proveedores --file dataset/proveedores.json --jsonArray
mongoimport --db tiendaBorojo --collection inventario  --file dataset/inventario.json  --jsonArray
```

### **Opci√≥n B ‚Äî desde `mongosh`:**
```javascript
use tiendaBorojo
db.productos.insertMany(JSON.parse(cat('dataset/productos.json')))
db.clientes.insertMany(JSON.parse(cat('dataset/clientes.json')))
db.ventas.insertMany(JSON.parse(cat('dataset/ventas.json')))
db.proveedores.insertMany(JSON.parse(cat('dataset/proveedores.json')))
db.inventario.insertMany(JSON.parse(cat('dataset/inventario.json')))
```

> ‚úÖ Esta segunda opci√≥n es √∫til si no tienes instaladas las herramientas de `mongoimport`.  

---

## ‚ñ∂Ô∏è C√≥mo ejecutar los scripts

Cada grupo de ejercicios se encuentra modularizado en un archivo `.js`. Para ejecutarlos desde la ra√≠z del repositorio:  

```bash
# Ejemplo: ejecutar inserciones
mongosh "tiendaBorojo" scripts/insercion.js

# Ejecutar cada m√≥dulo seg√∫n el tema
mongosh "tiendaBorojo" scripts/lectura.js
mongosh "tiendaBorojo" scripts/actualizacion.js
mongosh "tiendaBorojo" scripts/eliminacion.js
mongosh "tiendaBorojo" scripts/regex.js
mongosh "tiendaBorojo" scripts/arrays.js
mongosh "tiendaBorojo" scripts/agregation.js
mongosh "tiendaBorojo" scripts/system.js
mongosh "tiendaBorojo" scripts/indexacion.js
```

### ‚ö†Ô∏è Nota sobre transacciones
Para ejecutar `transacciones.js`, es indispensable contar con un **Replica Set** activo.  
En local puedes iniciar uno de un solo nodo:  
```bash
mongod --replSet rs0 --dbpath ./data --bind_ip 127.0.0.1
mongosh --eval "rs.initiate()"
```
Luego:  
```bash
mongosh "tiendaBorojo" scripts/transacciones.js
```

---

## üìÇ Estructura del repositorio

```
üì¶ TiendaBorojoMongo-main
‚î£ üìÅ dataset
‚îÉ ‚î£ üìÑ clientes.json
‚îÉ ‚î£ üìÑ inventario.json
‚îÉ ‚î£ üìÑ productos.json
‚îÉ ‚î£ üìÑ proveedores.json
‚îÉ ‚îó üìÑ ventas.json
‚î£ üìÅ scripts
‚îÉ ‚î£ üìÑ actualizacion.js
‚îÉ ‚î£ üìÑ agregation.js
‚îÉ ‚î£ üìÑ arrays.js
‚îÉ ‚î£ üìÑ eliminacion.js
‚îÉ ‚î£ üìÑ indexacion.js
‚îÉ ‚î£ üìÑ insercion.js
‚îÉ ‚î£ üìÑ lectura.js
‚îÉ ‚î£ üìÑ regex.js
‚îÉ ‚î£ üìÑ system.js
‚îÉ ‚îó üìÑ transacciones.js
‚î£ üìÅ capturas
‚îÉ ‚î£ üìÑ consulta-1.png
‚îÉ ‚î£ üìÑ consulta-2.png
‚îÉ ‚î£ üìÑ consulta-3.png
‚îÉ ‚î£ üìÑ consulta-4.png
‚îÉ ‚î£ üìÑ consulta-5.png
‚îÉ ‚î£ üìÑ consulta-6.png
‚îÉ ‚î£ üìÑ consulta-7.png
‚îÉ ‚î£ üìÑ consulta-8.png
‚îÉ ‚î£ üìÑ consulta-9.png
‚îÉ ‚î£ üìÑ consulta-10.png
‚îÉ ‚î£ üìÑ consulta-11.png
‚îÉ ‚î£ üìÑ consulta-12.png
‚îÉ ‚îó üìÑ consulta-13.png
‚îó üìÑ README.md
```

---

## ‚úÖ Listado de ejercicios y archivos

Cada bloque incluye la explicaci√≥n del objetivo, su importancia en un entorno real y el script donde fue implementado.

### üîπ Inserci√≥n ‚Äî `scripts/insercion.js`
- Agrega **"Chocolatina de boroj√≥"** a `productos` y el cliente **"Mario Mendoza"**.  
- Objetivo: practicar `insertOne`/`insertMany`, garantizar consistencia de datos y validar la estructura del documento.

### üîπ Lectura ‚Äî `scripts/lectura.js`
- Consulta de productos con `stock > 20`.  
- Listado de clientes con **cero compras** (`$size: 0`).  
- Objetivo: desarrollar filtros simples, aplicar proyecciones y explorar selectividad.

### üîπ Actualizaci√≥n ‚Äî `scripts/actualizacion.js`
- Incrementa stock de **"Boroj√≥ deshidratado"** (`$inc`).  
- A√±ade tag **"bajo az√∫car"** a bebidas (`$addToSet`).  
- Objetivo: realizar actualizaciones at√≥micas y aplicar condiciones de negocio.

### üîπ Eliminaci√≥n ‚Äî `scripts/eliminacion.js`
- Elimina un cliente por `email`.  
- Elimina productos con `stock < 5`.  
- Objetivo: controlar eliminaciones masivas de forma segura (`deleteOne`/`deleteMany`).

### üîπ Expresiones Regulares ‚Äî `scripts/regex.js`
- B√∫squeda de nombres que **empiecen** por `Boro`.  
- B√∫squeda de productos que **contengan** `"con"`.  
- Filtrado de clientes con la letra `z` (case-insensitive).  
- Objetivo: consultas textuales m√°s flexibles en campos de texto.

### üîπ Operadores en Arrays ‚Äî `scripts/arrays.js`
- Clientes que tengan `"natural"` en `preferencias`.  
- Productos que cumplan con `["natural","org√°nico"]` (`$all`).  
- Validaci√≥n de productos con **m√°s de un tag** (`$size`).  
- Objetivo: demostrar el poder de MongoDB para manejar datos semiestructurados.

### üîπ Aggregation Framework ‚Äî `scripts/agregation.js`
- **Productos m√°s vendidos** (`$group` + `$sum`).  
- **Clientes por cantidad de compras** (`$group`).  
- **Ventas por mes** (`$month`).  
- **Promedio de precios por categor√≠a** (`$avg`).  
- **Top 3** productos por `stock` (`$sort` + `$limit`).  
- Objetivo: aplicar an√°lisis en tiempo real sin necesidad de herramientas externas.

### üîπ Funciones en `system.js` ‚Äî `scripts/system.js`
- `calcularDescuento(precio, porcentaje)`: retorna precio final.  
- `clienteActivo(idCliente)`: devuelve `true` si el cliente supera cierto umbral de compras.  
- `verificarStock(productoId, cantidadDeseada)`: eval√∫a disponibilidad de inventario.  
- Objetivo: encapsular l√≥gica de negocio en funciones reutilizables.

### üîπ Transacciones ‚Äî `scripts/transacciones.js`
- **Venta**: descuenta stock e inserta en `ventas`.  
- **Entrada de inventario**: registra el lote y actualiza existencias.  
- **Devoluci√≥n**: repone stock y elimina la venta asociada.  
- Objetivo: garantizar atomicidad de operaciones complejas.

### üîπ Indexaci√≥n ‚Äî `scripts/indexacion.js`
- √çndice en `productos.nombre`.  
- √çndice compuesto `productos(categoria, precio)`.  
- √çndice en `clientes.email`.  
- Verificaci√≥n con `explain("executionStats")`.  
- Objetivo: demostrar c√≥mo los √≠ndices mejoran la velocidad de b√∫squeda y reducen el consumo de recursos.

---

## üß™ Datos de ejemplo

Los archivos JSON en `dataset/` incluyen informaci√≥n ficticia de productos, clientes, proveedores y transacciones. Su prop√≥sito es reproducir de manera realista el flujo de datos de la tienda, facilitando la experimentaci√≥n con consultas y pruebas de rendimiento.

---

## üì∑ Evidencias (capturas)

### Lectura

#### 1) Productos con stock > 20
![Lectura 1](capturas/consulta-1.png)

#### 2) Clientes sin compras
![Lectura 2](capturas/consulta-2.png)

---

### Consultas con Expresiones Regulares

#### 1) Productos cuyo nombre empiece por "Boro"
![Regex 1](capturas/consulta-3.png)

#### 2) Productos cuyo nombre contenga "con"
![Regex 2](capturas/consulta-4.png)

#### 3) Clientes cuyo nombre tenga la letra "z"
![Regex 3](capturas/consulta-5.png)

---

### Operadores en consultas sobre arrays

#### 1) Clientes con "natural" en sus preferencias
![Arrays 1](capturas/consulta-6.png)

#### 2) Productos con los tags "natural" y "org√°nico" ($all)
![Arrays 2](capturas/consulta-7.png)

#### 3) Productos con m√°s de un tag
![Arrays 3](capturas/consulta-8.png)

---

### Aggregation Framework con Pipelines

#### 1) Productos m√°s vendidos (suma de unidades)
![Aggregation 1](capturas/consulta-9.png)

#### 2) Clientes agrupados por cantidad de compras
![Aggregation 2](capturas/consulta-10.png)

#### 3) Total de ventas por mes
![Aggregation 3](capturas/consulta-11.png)

#### 4) Promedio de precios por categor√≠a
![Aggregation 4](capturas/consulta-12.png)

#### 5) Top 3 productos con mayor stock
![Aggregation 5](capturas/consulta-13.png)



---

# üèÅ Conclusi√≥n

Este proyecto permiti√≥ integrar, de manera pr√°ctica y ordenada, los principales fundamentos y t√©cnicas avanzadas del ecosistema **MongoDB**, consolidando conocimientos esenciales para el trabajo con bases de datos NoSQL en contextos reales.  

A trav√©s de la simulaci√≥n de una tienda dedicada a la comercializaci√≥n de productos derivados del **boroj√≥**, se abordaron los siguientes aspectos:  

- **CRUD b√°sico y avanzado**, consolidando la capacidad de realizar inserciones, consultas, actualizaciones y eliminaciones de manera at√≥mica y controlada.  
- Uso de **expresiones regulares** para potenciar la b√∫squeda textual y enriquecer las consultas sobre los datos almacenados.  
- Manejo de **operadores en arrays**, lo cual facilit√≥ explorar escenarios m√°s din√°micos donde los atributos no son est√°ticos, sino colecciones flexibles de informaci√≥n.  
- Implementaci√≥n de **Aggregation Pipelines**, que permiti√≥ realizar an√°lisis estad√≠sticos, res√∫menes de ventas, identificaci√≥n de tendencias de consumo y clasificaci√≥n de productos.  
- Desarrollo de **funciones en `system.js`**, lo que introdujo una capa de l√≥gica reutilizable dentro de la propia base de datos, potenciando la eficiencia y la coherencia.  
- **Transacciones multi-documento**, aplicadas a escenarios de venta, devoluciones e inventario, que garantizaron la atomicidad y confiabilidad de los procesos cr√≠ticos del negocio.  
- **Indexaci√≥n estrat√©gica**, clave para optimizar consultas y asegurar un rendimiento escalable frente al crecimiento de la informaci√≥n.  

M√°s all√° del aspecto t√©cnico, este trabajo representa un ejercicio de **pensamiento cr√≠tico y modelado de informaci√≥n**, donde cada decisi√≥n de dise√±o tiene un impacto directo en la facilidad de consulta, la escalabilidad y la solidez del sistema.  
De esta manera, la experiencia no solo enriquece el dominio de MongoDB, sino que tambi√©n refuerza competencias transversales en la gesti√≥n de proyectos de datos: desde la estructuraci√≥n de colecciones y datasets iniciales hasta la optimizaci√≥n y documentaci√≥n final.  

En conclusi√≥n, el proyecto de **La Tienda del Boroj√≥** simboliza c√≥mo una base de datos bien estructurada puede convertirse en el coraz√≥n de un ecosistema digital, capaz de sostener procesos de negocio, an√°lisis de informaci√≥n y toma de decisiones.  


---

# üìå Notas

- Se recomienda MongoDB **‚â• 4.2** para ejecutar transacciones.  
- En Windows, utilizar **PowerShell** o **CMD** desde la ra√≠z del proyecto para que las rutas relativas funcionen correctamente.  
- Para exportar resultados a JSON o CSV:  
  ```bash
  mongoexport --db tiendaBorojo --collection productos --out productos.csv --type=csv
  ```
- Tambi√©n puedes usar en `mongosh`:  
  ```javascript
  db.productos.find().toArray().forEach(printjson)
  ```

---
## üë®‚Äçüíª DESARROLLADORES

-üßë‚Äçüíª Ricardo Palomino  
-üßë‚Äçüíª Santiago Romero  


> ‚ú® "Los datos son como semillas: bien cuidados, crecen en conocimiento; mal gestionados, se marchitan en el olvido."